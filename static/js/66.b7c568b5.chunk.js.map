{"version":3,"file":"static/js/66.b7c568b5.chunk.js","mappings":"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","sources":["helpers/notificationStyles.js","helpers/validatePassword.js","../node_modules/@chakra-ui/input/src/input-group.tsx","../node_modules/@chakra-ui/input/src/input-element.tsx","../node_modules/@chakra-ui/icons/src/View.tsx","../node_modules/@chakra-ui/icons/src/ViewOff.tsx","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx","../node_modules/@chakra-ui/form-control/src/form-error.tsx"],"sourcesContent":["export const styles = {\n  position: 'top-right',\n  duration: 2000,\n  style: {\n    height: 50,\n    fontWeight: 600,\n  },\n};\n","export const validatePassword = value => {\n  let error;\n  if (!value) {\n    error = 'Password is required';\n  } else if (value.length < 7) {\n    error = 'Must be 7 characters or more';\n  }\n  return error;\n};\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\nimport { cloneElement } from \"react\"\n\nconst [InputGroupStylesProvider, useInputGroupStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `InputGroupStylesContext`,\n  errorMessage: `useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<InputGroup />\" `,\n})\n\nexport { useInputGroupStyles }\n\nexport interface InputGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Input\"> {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">(\n  function InputGroup(props, ref) {\n    const styles = useMultiStyleConfig(\"Input\", props)\n    const { children, className, ...rest } = omitThemingProps(props)\n\n    const _className = cx(\"chakra-input__group\", className)\n    const groupStyles: InputGroupProps = {}\n\n    const validChildren = getValidChildren(children)\n\n    const input: any = styles.field\n\n    validChildren.forEach((child: any) => {\n      if (!styles) return\n\n      if (input && child.type.id === \"InputLeftElement\") {\n        groupStyles.paddingStart = input.height ?? input.h\n      }\n\n      if (input && child.type.id === \"InputRightElement\") {\n        groupStyles.paddingEnd = input.height ?? input.h\n      }\n\n      if (child.type.id === \"InputRightAddon\") {\n        groupStyles.borderEndRadius = 0\n      }\n\n      if (child.type.id === \"InputLeftAddon\") {\n        groupStyles.borderStartRadius = 0\n      }\n    })\n\n    const clones = validChildren.map((child: any) => {\n      /**\n       * Make it possible to override the size and variant from `Input`\n       */\n\n      const theming = compact({\n        size: child.props?.size || props.size,\n        variant: child.props?.variant || props.variant,\n      })\n\n      return child.type.id !== \"Input\"\n        ? cloneElement(child, theming)\n        : cloneElement(child, Object.assign(theming, groupStyles, child.props))\n    })\n\n    return (\n      <chakra.div\n        className={_className}\n        ref={ref}\n        __css={{\n          width: \"100%\",\n          display: \"flex\",\n          position: \"relative\",\n          // Parts of inputs override z-index to ensure that they stack correctly on each other\n          // Create a new stacking context so that these overrides don't leak out and conflict with other z-indexes\n          isolation: \"isolate\",\n          ...styles.group,\n        }}\n        data-group\n        {...rest}\n      >\n        <InputGroupStylesProvider value={styles}>\n          {clones}\n        </InputGroupStylesProvider>\n      </chakra.div>\n    )\n  },\n)\n\nInputGroup.displayName = \"InputGroup\"\n","import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useInputGroupStyles } from \"./input-group\"\n\nexport interface InputElementProps extends HTMLChakraProps<\"div\"> {\n  placement?: \"left\" | \"right\"\n}\n\nconst StyledInputElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2,\n  },\n})\n\nconst InputElement = forwardRef<InputElementProps, \"div\">(function InputElement(\n  props,\n  ref,\n) {\n  const { placement = \"left\", ...rest } = props\n\n  const styles = useInputGroupStyles()\n  const input: any = styles.field\n\n  const attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\"\n\n  const elementStyles: SystemStyleObject = {\n    [attr]: \"0\",\n    width: input?.height ?? input?.h,\n    height: input?.height ?? input?.h,\n    fontSize: input?.fontSize,\n    ...styles.element,\n  }\n\n  return <StyledInputElement ref={ref} __css={elementStyles} {...rest} />\n})\n\n// This is used in `input-group.tsx`\nInputElement.id = \"InputElement\"\n\nInputElement.displayName = \"InputElement\"\n\nexport type InputLeftElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputLeftElement = forwardRef<InputLeftElementProps, \"div\">(\n  function InputLeftElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__left-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"left\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputLeftElement.id = \"InputLeftElement\"\n\nInputLeftElement.displayName = \"InputLeftElement\"\n\nexport type InputRightElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputRightElement = forwardRef<InputRightElementProps, \"div\">(\n  function InputRightElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__right-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"right\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputRightElement.id = \"InputRightElement\"\n\nInputRightElement.displayName = \"InputRightElement\"\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const ViewIcon = createIcon({\n  displayName: \"ViewIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M23.432,10.524C20.787,7.614,16.4,4.538,12,4.6,7.6,4.537,3.213,7.615.568,10.524a2.211,2.211,0,0,0,0,2.948C3.182,16.351,7.507,19.4,11.839,19.4h.308c4.347,0,8.671-3.049,11.288-5.929A2.21,2.21,0,0,0,23.432,10.524ZM7.4,12A4.6,4.6,0,1,1,12,16.6,4.6,4.6,0,0,1,7.4,12Z\" />\n      <circle cx=\"12\" cy=\"12\" r=\"2\" />\n    </g>\n  ),\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const ViewOffIcon = createIcon({\n  displayName: \"ViewOffIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M23.2,10.549a20.954,20.954,0,0,0-4.3-3.6l4-3.995a1,1,0,1,0-1.414-1.414l-.018.018a.737.737,0,0,1-.173.291l-19.5,19.5c-.008.007-.018.009-.026.017a1,1,0,0,0,1.631,1.088l4.146-4.146a11.26,11.26,0,0,0,4.31.939h.3c4.256,0,8.489-2.984,11.051-5.8A2.171,2.171,0,0,0,23.2,10.549ZM16.313,13.27a4.581,4.581,0,0,1-3,3.028,4.3,4.3,0,0,1-3.1-.19.253.253,0,0,1-.068-.407l5.56-5.559a.252.252,0,0,1,.407.067A4.3,4.3,0,0,1,16.313,13.27Z\" />\n      <path d=\"M7.615,13.4a.244.244,0,0,0,.061-.24A4.315,4.315,0,0,1,7.5,12,4.5,4.5,0,0,1,12,7.5a4.276,4.276,0,0,1,1.16.173.244.244,0,0,0,.24-.062l1.941-1.942a.254.254,0,0,0-.1-.421A10.413,10.413,0,0,0,12,4.75C7.7,4.692,3.4,7.7.813,10.549a2.15,2.15,0,0,0-.007,2.9,21.209,21.209,0,0,0,3.438,3.03.256.256,0,0,0,.326-.029Z\" />\n    </g>\n  ),\n})\n","import { signUp } from 'redux/auth/authOperations';\nimport { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Stack,\n  Button,\n  Text,\n  useColorModeValue,\n  ScaleFade,\n  FormErrorMessage,\n} from '@chakra-ui/react';\nimport { ViewIcon, ViewOffIcon } from '@chakra-ui/icons';\nimport { Link } from 'react-router-dom';\nimport { Field, Formik } from 'formik';\nimport toast from 'react-hot-toast';\nimport { styles } from 'helpers/notificationStyles';\nimport { validatePassword } from 'helpers/validatePassword';\n\nconst RegisterForm = () => {\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n  const [showPassword, setShowPassword] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const nameInputId = nanoid();\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n\n  const onSubmit = async ({ name, email, password }, actions) => {\n    try {\n      await dispatch(signUp({ name, email, password })).unwrap();\n      actions.resetForm();\n    } catch (error) {\n      toast.error(error, styles);\n    }\n  };\n\n  return (\n    <ScaleFade initialScale={0.7} in>\n      <Box\n        rounded={'lg'}\n        bg={useColorModeValue('white', 'gray.700')}\n        boxShadow={'lg'}\n        p={{ base: 6, lg: 8 }}\n      >\n        <Stack spacing={20} w={{ md: 350 }}>\n          <Formik initialValues={initialValues} onSubmit={onSubmit}>\n            {({\n              values: { name, email, password },\n              handleChange,\n              handleSubmit,\n              errors,\n              touched,\n            }) => (\n              <form onSubmit={handleSubmit}>\n                <Stack spacing={4}>\n                  <FormControl isRequired>\n                    <FormLabel htmlFor={nameInputId}>Name</FormLabel>\n                    <Field\n                      as={Input}\n                      autoComplete=\"off\"\n                      type=\"text\"\n                      name=\"name\"\n                      value={name}\n                      pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                      title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                      onChange={handleChange}\n                      id={nameInputId}\n                    />\n                  </FormControl>\n                  <FormControl isRequired>\n                    <FormLabel htmlFor={emailInputId}>Email</FormLabel>\n                    <Field\n                      as={Input}\n                      autoComplete=\"off\"\n                      type=\"email\"\n                      name=\"email\"\n                      value={email}\n                      onChange={handleChange}\n                      id={emailInputId}\n                    />\n                  </FormControl>\n                  <FormControl\n                    isInvalid={!!errors.password && touched.password}\n                    isRequired\n                  >\n                    <FormLabel htmlFor={passwordInputId}>Password</FormLabel>\n                    <InputGroup>\n                      <Field\n                        as={Input}\n                        autoComplete=\"off\"\n                        name=\"password\"\n                        value={password}\n                        type={showPassword ? 'text' : 'password'}\n                        onChange={handleChange}\n                        id={passwordInputId}\n                        validate={validatePassword}\n                      />\n\n                      <InputRightElement h={'full'}>\n                        <Button\n                          variant={'ghost'}\n                          onClick={() =>\n                            setShowPassword(showPassword => !showPassword)\n                          }\n                        >\n                          {showPassword ? <ViewIcon /> : <ViewOffIcon />}\n                        </Button>\n                      </InputRightElement>\n                    </InputGroup>\n                    <FormErrorMessage>{errors.password}</FormErrorMessage>\n                  </FormControl>\n                  <Stack spacing={10} pt={2}>\n                    <Button\n                      type=\"submit\"\n                      loadingText=\"Submitting\"\n                      size=\"lg\"\n                      colorScheme=\"orange\"\n                    >\n                      Sign up\n                    </Button>\n                  </Stack>\n                  <Stack pt={6}>\n                    <Text align={'center'}>\n                      Already a user?\n                      <Link\n                        style={{\n                          color: '#66bfbf',\n                          marginLeft: '6px',\n                          textDecoration: 'underline',\n                        }}\n                        to=\"/login\"\n                      >\n                        Login\n                      </Link>\n                    </Text>\n                  </Stack>\n                </Stack>\n              </form>\n            )}\n          </Formik>\n        </Stack>\n      </Box>\n    </ScaleFade>\n  );\n};\n\nexport default RegisterForm;\n","import { Flex, Stack, Heading, Text } from '@chakra-ui/react';\nimport RegisterForm from 'components/RegisterForm/RegisterForm';\nimport { useSelector } from 'react-redux';\nimport { selectIsFetching } from 'redux/auth/authSelectors';\n\nconst Register = () => {\n  const isFetching = useSelector(selectIsFetching);\n\n  return (\n    !isFetching && (\n      <Flex justify={'center'} minH={'82.8vh'}>\n        <Stack spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>\n          <Stack align={'center'}>\n            <Heading fontSize={{ base: '3xl', lg: '4xl' }} textAlign={'center'}>\n              Sign up\n            </Heading>\n            <Text fontSize={'lg'} color={'gray.600'}>\n              to save your worldwide contacts 📞\n            </Text>\n          </Stack>\n          <RegisterForm />\n        </Stack>\n      </Flex>\n    )\n  );\n};\n\nexport default Register;\n","import { type IconProps, Icon } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext } from \"./form-control\"\n\nconst [FormErrorStylesProvider, useFormErrorStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormErrorStylesContext`,\n  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormError />\" `,\n})\n\nexport { useFormErrorStyles }\nexport interface FormErrorMessageProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormErrorMessage\"> {}\n\n/**\n * Used to provide feedback about an invalid input,\n * and suggest clear instructions on how to fix it.\n */\nexport const FormErrorMessage = forwardRef<FormErrorMessageProps, \"div\">(\n  (props, ref) => {\n    const styles = useMultiStyleConfig(\"FormError\", props)\n    const ownProps = omitThemingProps(props)\n    const field = useFormControlContext()\n\n    if (!field?.isInvalid) return null\n\n    return (\n      <FormErrorStylesProvider value={styles}>\n        <chakra.div\n          {...field?.getErrorMessageProps(ownProps, ref)}\n          className={cx(\"chakra-form__error-message\", props.className)}\n          __css={{\n            display: \"flex\",\n            alignItems: \"center\",\n            ...styles.text,\n          }}\n        />\n      </FormErrorStylesProvider>\n    )\n  },\n)\n\nFormErrorMessage.displayName = \"FormErrorMessage\"\n\n/**\n * Used as the visual indicator that a field is invalid or\n * a field has incorrect values.\n */\nexport const FormErrorIcon = forwardRef<IconProps, \"svg\">((props, ref) => {\n  const styles = useFormErrorStyles()\n  const field = useFormControlContext()\n\n  if (!field?.isInvalid) return null\n\n  const _className = cx(\"chakra-form__error-icon\", props.className)\n\n  return (\n    <Icon\n      ref={ref}\n      aria-hidden\n      {...props}\n      __css={styles.icon}\n      className={_className}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n      />\n    </Icon>\n  )\n})\n\nFormErrorIcon.displayName = \"FormErrorIcon\"\n"],"names":["styles","position","duration","style","height","fontWeight","validatePassword","value","error","length","createContext","errorMessage","InputGroupStylesProvider","useInputGroupStyles","InputGroup","props","forwardRef","children","className","useMultiStyleConfig","omitThemingProps","rest","_className","groupStyles","validChildren","cx","input","field","getValidChildren","forEach","child","type","id","paddingStart","_a","h","paddingEnd","_b","borderEndRadius","borderStartRadius","clones","map","theming","size","variant","compact","Object","assign","cloneElement","div","__css","name","chakra","display","isolation","group","displayName","alignItems","justifyContent","top","zIndex","InputElement","ref","attr","elementStyles","fontSize","element","baseStyle","InputLeftElement","StyledInputElement","createIcon","path","fill","ViewIcon","d","jsx","cy","r","ViewOffIcon","useState","showPassword","setShowPassword","dispatch","useDispatch","nameInputId","nanoid","emailInputId","passwordInputId","onSubmit","actions","email","password","signUp","unwrap","resetForm","toast","initialScale","in","rounded","bg","useColorModeValue","boxShadow","p","base","lg","spacing","w","md","initialValues","values","handleChange","handleSubmit","errors","touched","isRequired","htmlFor","as","Input","autoComplete","pattern","title","onChange","isInvalid","validate","InputRightElement","onClick","pt","loadingText","colorScheme","align","color","marginLeft","textDecoration","to","useSelector","selectIsFetching","justify","minH","mx","maxW","py","px","textAlign","FormErrorStylesProvider","useFormErrorStyles","FormErrorMessage","ownProps","useFormControlContext","Icon","text","FormErrorIcon","icon"],"sourceRoot":""}