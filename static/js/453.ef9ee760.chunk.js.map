{"version":3,"file":"static/js/453.ef9ee760.chunk.js","mappings":"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","sources":["helpers/notificationStyles.js","redux/selectors.js","components/ContactForm/ContactForm.jsx","ModalEditContact/ModalEditContact.jsx","components/ContactList/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const styles = {\n  position: 'top-right',\n  duration: 2000,\n  style: {\n    height: 50,\n    fontWeight: 600,\n  },\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactOperations';\nimport { selectContacts, selectIsLoading } from 'redux/selectors';\nimport {\n  Box,\n  FormLabel,\n  Stack,\n  Heading,\n  Text,\n  useColorModeValue,\n  ScaleFade,\n  Input,\n  Button,\n} from '@chakra-ui/react';\nimport { Field, Formik } from 'formik';\nimport toast from 'react-hot-toast';\nimport { styles } from 'helpers/notificationStyles';\n\nconst ContactForm = () => {\n  const initialValues = {\n    name: '',\n    phone: '',\n  };\n\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const nameInputId = nanoid();\n  const telInputId = nanoid();\n\n  const onSubmit = ({ name, phone }, actions) => {\n    const existingContact = contacts.find(contact => contact.name === name);\n    if (existingContact) {\n      toast(`${name} is already in contacts`, { ...styles, icon: 'ℹ️' });\n      return;\n    }\n\n    dispatch(addContact({ name, phone }));\n    toast.success('You have successfully added a contact', styles);\n    actions.resetForm();\n  };\n\n  return (\n    <Stack spacing={6} mx={'auto'} maxW={'lg'} py={6} px={6}>\n      <Stack align={'center'}>\n        <Heading fontSize={{ base: '3xl', lg: '4xl' }} textAlign={'center'}>\n          This is your PhoneBook\n        </Heading>\n        <Text fontSize={'lg'} color={'gray.600'}>\n          here you can add contacts\n        </Text>\n      </Stack>\n      <ScaleFade initialScale={0.7} in>\n        <Box\n          rounded={'lg'}\n          bg={useColorModeValue('white', 'gray.700')}\n          boxShadow={'lg'}\n          p={8}\n        >\n          <Stack spacing={20} w={{ base: 'none', md: 350 }}>\n            <Formik initialValues={initialValues} onSubmit={onSubmit}>\n              {({\n                values: { name, phone },\n                handleChange,\n                handleSubmit,\n                errors,\n                touched,\n              }) => (\n                <form onSubmit={handleSubmit}>\n                  <Stack spacing={2}>\n                    <FormLabel htmlFor={nameInputId}>Name</FormLabel>\n                    <Field\n                      as={Input}\n                      type=\"text\"\n                      name=\"name\"\n                      value={name}\n                      pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                      title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                      required\n                      onChange={handleChange}\n                      id={nameInputId}\n                    />\n                    <FormLabel htmlFor={telInputId}>Number</FormLabel>\n                    <Field\n                      as={Input}\n                      type=\"tel\"\n                      name=\"phone\"\n                      value={phone}\n                      pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n                      title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                      required\n                      onChange={handleChange}\n                      id={telInputId}\n                    />\n\n                    <Button\n                      type=\"submit\"\n                      colorScheme=\"orange\"\n                      isLoading={isLoading}\n                    >\n                      Add contact\n                    </Button>\n                  </Stack>\n                </form>\n              )}\n            </Formik>\n          </Stack>\n        </Box>\n      </ScaleFade>\n    </Stack>\n  );\n};\n\nexport default ContactForm;\n","import {\n  FormControl,\n  FormLabel,\n  Input,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Button,\n  Modal,\n} from '@chakra-ui/react';\nimport { updateContact } from 'redux/contacts/contactOperations';\nimport { styles } from 'helpers/notificationStyles';\nimport { useState } from 'react';\nimport toast from 'react-hot-toast';\nimport { useDispatch } from 'react-redux';\n\nconst ModalEditContact = ({ isOpen, onClose, name, phone, id }) => {\n  const [nameValue, setNameValue] = useState(name);\n  const [phoneValue, setPhoneValue] = useState(phone);\n  const dispatch = useDispatch();\n\n  const handleUpdate = e => {\n    e.preventDefault();\n    const contact = {\n      name: nameValue,\n      phone: phoneValue,\n    };\n    dispatch(updateContact({ id, contact }));\n    toast.success('You successfully updated contact', styles);\n    onClose();\n  };\n\n  return (\n    <>\n      <Modal isOpen={isOpen} onClose={onClose} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Edit your contact</ModalHeader>\n          <ModalCloseButton />\n          <form onSubmit={handleUpdate}>\n            <ModalBody pb={6}>\n              <FormControl>\n                <FormLabel>Name</FormLabel>\n                <Input\n                  value={nameValue}\n                  onChange={e => setNameValue(e.target.value)}\n                />\n              </FormControl>\n\n              <FormControl mt={4}>\n                <FormLabel>Phone</FormLabel>\n                <Input\n                  value={phoneValue}\n                  onChange={e => setPhoneValue(e.target.value)}\n                />\n              </FormControl>\n            </ModalBody>\n\n            <ModalFooter>\n              <Button type=\"submit\" colorScheme=\"orange\" mr={3}>\n                Save\n              </Button>\n              <Button onClick={onClose}>Cancel</Button>\n            </ModalFooter>\n          </form>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ModalEditContact;\n","import { useDispatch } from 'react-redux';\nimport { Heading, IconButton, useDisclosure } from '@chakra-ui/react';\nimport { deleteContact } from 'redux/contacts/contactOperations';\nimport { DeleteIcon } from '@chakra-ui/icons';\nimport { styles } from 'helpers/notificationStyles';\nimport toast from 'react-hot-toast';\nimport { AiOutlineEdit } from 'react-icons/ai';\nimport ModalEditContact from 'ModalEditContact/ModalEditContact';\n\nconst ContactListItem = ({ item }) => {\n  const dispatch = useDispatch();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const formattedPhone = item.phone.replace(/ x\\d+$/, '');\n\n  const handleDelete = () => {\n    dispatch(deleteContact(item));\n    toast.success('You have successfully deleted a contact', styles);\n  };\n\n  return (\n    <li>\n      <Heading size={'sm'} display={'inline-block'}>\n        {item.name}\n      </Heading>\n      : {formattedPhone}\n      <IconButton\n        icon={<AiOutlineEdit />}\n        colorScheme=\"orange\"\n        h={7}\n        ml={3}\n        onClick={onOpen}\n      ></IconButton>\n      <IconButton\n        onClick={handleDelete}\n        icon={<DeleteIcon />}\n        h={7}\n        ml={3}\n        colorScheme=\"orange\"\n      ></IconButton>\n      <ModalEditContact\n        isOpen={isOpen}\n        onClose={onClose}\n        name={item.name}\n        phone={item.phone}\n        id={item._id}\n      />\n    </li>\n  );\n};\n\nexport default ContactListItem;\n","import { Container, OrderedList } from '@chakra-ui/react';\nimport ContactListItem from 'components/ContactList/ContactListItem';\nimport { selectFilteredContacts } from 'redux/selectors';\nimport { useSelector } from 'react-redux';\n\nconst ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    filteredContacts.length > 0 && (\n      <Container\n        mt={2}\n        p={2}\n        style={{\n          borderRadius: '0.3rem',\n          background: 'white',\n          boxShadow:\n            '0 4px 6px -1px rgba(0, 0, 0, 0.1),0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n        }}\n      >\n        <OrderedList spacing={2}>\n          {filteredContacts.map(item => (\n            <ContactListItem key={item._id} item={item} />\n          ))}\n        </OrderedList>\n      </Container>\n    )\n  );\n};\n\nexport default ContactList;\n","import { changeFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Flex, FormLabel, Input } from '@chakra-ui/react';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  const handleFilterChange = e => dispatch(changeFilter(e.currentTarget.value));\n\n  return (\n    <Flex justifyContent={'center'}>\n      <FormLabel>\n        Find contact by name\n        <Input\n          type=\"text\"\n          value={filter}\n          onChange={handleFilterChange}\n          borderColor={'blue.200'}\n        />\n      </FormLabel>\n    </Flex>\n  );\n};\n\nexport default Filter;\n","import { Box, Container } from '@chakra-ui/react';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport { fetchContacts } from 'redux/contacts/contactOperations';\nimport { selectError } from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoggedin } from 'redux/auth/authSelectors';\n\nconst Contacts = () => {\n  const error = useSelector(selectError);\n  const isLoggedIn = useSelector(selectIsLoggedin);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    isLoggedIn && dispatch(fetchContacts());\n  }, [dispatch, isLoggedIn]);\n\n  return (\n    <Container>\n      <Box minH={'82.8vh'}>\n        <ContactForm />\n        <Filter />\n        {error && <b>Error!</b>}\n        <ContactList />\n      </Box>\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["styles","position","duration","style","height","fontWeight","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectFilteredContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","useSelector","dispatch","useDispatch","nameInputId","nanoid","telInputId","spacing","mx","maxW","py","px","align","fontSize","base","lg","textAlign","color","initialScale","in","rounded","bg","useColorModeValue","boxShadow","p","w","md","initialValues","phone","onSubmit","actions","find","toast","icon","addContact","resetForm","values","handleChange","handleSubmit","errors","touched","htmlFor","as","Input","type","value","pattern","title","required","onChange","id","colorScheme","isOpen","onClose","useState","nameValue","setNameValue","phoneValue","setPhoneValue","isCentered","e","preventDefault","updateContact","pb","I","target","mt","mr","onClick","item","useDisclosure","onOpen","formattedPhone","replace","size","display","h","ml","deleteContact","_id","filteredContacts","length","borderRadius","background","map","justifyContent","changeFilter","currentTarget","borderColor","isLoggedIn","selectIsLoggedin","useEffect","fetchContacts","minH"],"sourceRoot":""}